attribrules([evaluate,{to:ATo},_, [T]], [ATo|Tmp]):- !, remove(T, ATo, Tmp).
unaryimpl(evaluate,_, "EvaluateRelationalOperation").

pushprojectionrule(
    [pi, Arg1, [
        [evaluate,Arg2,[C]]
    ]],
    [pi, Arg1, [
        [evaluate,NewArg2, [
            [pi, Arg3, [C]]
        ]]
    ]]
):-
    % \Pi_a e_{f(b)}^c E \Pi_{a} e_{f(b)}^c \Pi_{(a \backslash c)\cup b} E
    map_get(Arg1, 'attributes', AttrA),
    map_get(Arg2, 'to', AttrTo),
    map_get(Arg2, 'expressionAttributes', AttrC),
    union([AttrA,AttrC], AttrTmp),
    remove(AttrTmp,AttrTo,Attr),
    necessarypi(C, Attr), !,
    map_put(Arg1, ['attributes', Attr], Arg3),
    map_put(Arg2, ['attributes', Attr], NewArg2).

pushselectionrule(
    [sigma, Arg1, [
        [evaluate,Arg2, [C]]
    ]],
    [evaluate, Arg2, [
        [sigma,Arg1, [C]]
    ]]
):-
    % \sigma_c \eval_f^a E \eval_f^a \sigma_c
    % si a \not\in Attr(c)
    map_get(Arg1, "to", To),
    map_get(Arg2, "conditionAttributes", CondAttr),
    not_element(To, CondAttr),
    !.
